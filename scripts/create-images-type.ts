/** biome-ignore-all lint/suspicious/noConsole: Used on development only */

import fs from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const projectRoot = path.resolve(__dirname, "..");
const publicImagesDir = path.join(projectRoot, "public", "images");
const outputTypeFile = path.join(projectRoot, "src", "types", "public-paths.d.ts");

async function getAllFiles(dirPath: string, arrayOfFiles: string[] = [], baseDir = dirPath) {
	const files = await fs.readdir(dirPath);

	for (const file of files) {
		const fullPath = path.join(dirPath, file);

		const stat = await fs.stat(fullPath);

		if (stat.isDirectory()) {
			await getAllFiles(fullPath, arrayOfFiles, baseDir);
		} else {
			const relativePath = `/${path.relative(baseDir, fullPath).replace(/\\/g, "/")}`;

			if (!file.startsWith(".")) {
				arrayOfFiles.push(relativePath);
			}
		}
	}

	return arrayOfFiles;
}

async function generateTypeDefinition() {
	try {
		console.log(`Scanning directory: ${publicImagesDir}`);

		const filePaths = await getAllFiles(publicImagesDir);

		console.log(`Found ${filePaths.length} files.`);

		if (filePaths.length === 0) {
			console.warn("No files found in public directory. Generating type as 'string'.");
		}

		const typeContent = `// This file is auto-generated by scripts/generate-public-paths.mjs\n// Do not edit manually!\n\nexport type PublicPath = ${
			filePaths.length > 0 ? filePaths.map((p) => `"${p}"`).join(" | ") : "string"
		};\n`;

		await fs.mkdir(path.dirname(outputTypeFile), { recursive: true });

		await fs.writeFile(outputTypeFile, typeContent, "utf8");

		console.log(`Type 'PublicPath' generated successfully at ${outputTypeFile}`);
	} catch (error) {
		console.error("Error generating public paths type:", error);

		process.exit(1);
	}
}

generateTypeDefinition();
